local ddata,invade=require "data",require "invade"
local function deepcopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[deepcopy(orig_key)] = deepcopy(orig_value)
        end
        setmetatable(copy, deepcopy(getmetatable(orig)))
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end
local function gdata() return deepcopy(ddata) end
describe("Invade",function()
  describe("with lots of money",function()
    describe("with a minimal invasion",function()
      describe("rolling a 1",function()
        local data=gdata()
        data.my_money=99999999
        data.random=function() return 1 end
        local invasion,reason=invade(data,"holy_roman_empire",1)
        it("should return true",function()
          assert.are.equal(true,invasion)
        end)
        it("should not return a resaon",function()
          assert.are.equal(nil,reason)
        end)
        it("should have less money left",function()
          assert.are_not.equal(data.my_money,99999999)
        end)
      end)
      describe("rolling a 2",function()
        local data=gdata()
        data.my_money=99999999
        data.random=function() return 2 end
        local invasion,reason=invade(data,"holy_roman_empire",1)
        it("should return false",function()
          assert.are.equal(false,invasion)
        end)
        it("should return the reason \"Bad roll\"",function()
          assert.are.equal("Bad roll",reason)
        end)
        it("should have less money left",function()
          assert.are_not.equal(data.my_money,99999999)
        end)
      end)
      describe("rolling a 3",function()
        local data=gdata()
        data.my_money=99999999
        data.random=function() return 3 end
        local invasion,reason=invade(data,"holy_roman_empire",1)
        it("should return false",function()
          assert.are.equal(false,invasion)
        end)
        it("should return the reason \"Bad roll\"",function()
          assert.are.equal("Bad roll",reason)
        end)
        it("should have less money left",function()
          assert.are_not.equal(data.my_money,99999999)
        end)
      end)
      describe("rolling a 4",function()
        local data=gdata()
        data.my_money=99999999
        data.random=function() return 4 end
        local invasion,reason=invade(data,"holy_roman_empire",1)
        it("should return false",function()
          assert.are.equal(false,invasion)
        end)
        it("should return the reason \"Bad roll\"",function()
          assert.are.equal("Bad roll",reason)
        end)
        it("should have less money left",function()
          assert.are_not.equal(data.my_money,99999999)
        end)
      end)
      describe("rolling a 5",function()
        local data=gdata()
        data.my_money=99999999
        data.random=function() return 5 end
        local invasion,reason=invade(data,"holy_roman_empire",1)
        it("should return false",function()
          assert.are.equal(false,invasion)
        end)
        it("should return the reason \"Bad roll\"",function()
          assert.are.equal("Bad roll",reason)
        end)
        it("should have less money left",function()
          assert.are_not.equal(data.my_money,99999999)
        end)
      end)
      describe("rolling a 6",function()
        local data=gdata()
        data.my_money=99999999
        data.random=function() return 6 end
        local invasion,reason=invade(data,"holy_roman_empire",1)
        it("should return false",function()
          assert.are.equal(false,invasion)
        end)
        it("should return the reason \"Bad roll\"",function()
          assert.are.equal("Bad roll",reason)
        end)
        it("should have less money left",function()
          assert.are_not.equal(data.my_money,99999999)
        end)
      end)
      describe("with a standard invasion",function()
        describe("rolling a 1",function()
          local data=gdata()
          data.my_money=99999999
          data.random=function() return 1 end
          local invasion,reason=invade(data,"holy_roman_empire",2)
          it("should return false",function()
            assert.are.equal(false,invasion)
          end)
          it("should return the reason \"Bad roll\"",function()
            assert.are.equal("Bad roll",reason)
          end)
          it("should have less money left",function()
            assert.are_not.equal(data.my_money,99999999)
          end)
        end)
        describe("rolling a 2",function()
          local data=gdata()
          data.my_money=99999999
          data.random=function() return 2 end
          local invasion,reason=invade(data,"holy_roman_empire",2)
          it("should return true",function()
            assert.are.equal(true,invasion)
          end)
          it("should not return a resaon",function()
            assert.are.equal(nil,reason)
          end)
          it("should have less money left",function()
            assert.are_not.equal(data.my_money,99999999)
          end)
        end)
        describe("rolling a 3",function()
          local data=gdata()
          data.my_money=99999999
          data.random=function() return 3 end
          local invasion,reason=invade(data,"holy_roman_empire",2)
          it("should return false",function()
            assert.are.equal(false,invasion)
          end)
          it("should return the reason \"Bad roll\"",function()
            assert.are.equal("Bad roll",reason)
          end)
          it("should have less money left",function()
            assert.are_not.equal(data.my_money,99999999)
          end)
        end)
        describe("rolling a 4",function()
          local data=gdata()
          data.my_money=99999999
          data.random=function() return 4 end
          local invasion,reason=invade(data,"holy_roman_empire",2)
          it("should return true",function()
            assert.are.equal(true,invasion)
          end)
          it("should not return a resaon",function()
            assert.are.equal(nil,reason)
          end)
          it("should have less money left",function()
            assert.are_not.equal(data.my_money,99999999)
          end)
        end)
        describe("rolling a 5",function()
          local data=gdata()
          data.my_money=99999999
          data.random=function() return 5 end
          local invasion,reason=invade(data,"holy_roman_empire",2)
          it("should return false",function()
            assert.are.equal(false,invasion)
          end)
          it("should return the reason \"Bad roll\"",function()
            assert.are.equal("Bad roll",reason)
          end)
          it("should have less money left",function()
            assert.are_not.equal(data.my_money,99999999)
          end)
        end)
      end)
      describe("rolling a 6",function()
        local data=gdata()
        data.my_money=99999999
        data.random=function() return 6 end
        local invasion,reason=invade(data,"holy_roman_empire",2)
        it("should return true",function()
          assert.are.equal(true,invasion)
        end)
        it("should not return a resaon",function()
          assert.are.equal(nil,reason)
        end)
        it("should have less money left",function()
          assert.are_not.equal(data.my_money,99999999)
        end)
      end)
      describe("with a full-force invasion",function()
        describe("rolling a 1",function()
          local data=gdata()
          data.my_money=99999999
          data.random=function() return 1 end
          local invasion,reason=invade(data,"holy_roman_empire",3)
          it("should return true",function()
            assert.are.equal(true,invasion)
          end)
          it("should not return a resaon",function()
            assert.are.equal(nil,reason)
          end)
          it("should have less money left",function()
            assert.are_not.equal(data.my_money,99999999)
          end)
        end)
        describe("rolling a 2",function()
          local data=gdata()
          data.my_money=99999999
          data.random=function() return 2 end
          local invasion,reason=invade(data,"holy_roman_empire",3)
          it("should return true",function()
            assert.are.equal(true,invasion)
          end)
          it("should not return a resaon",function()
            assert.are.equal(nil,reason)
          end)
          it("should have less money left",function()
            assert.are_not.equal(data.my_money,99999999)
          end)
        end)
        describe("rolling a 3",function()
          local data=gdata()
          data.my_money=99999999
          data.random=function() return 3 end
          local invasion,reason=invade(data,"holy_roman_empire",3)
          it("should return true",function()
            assert.are.equal(true,invasion)
          end)
          it("should not return a resaon",function()
            assert.are.equal(nil,reason)
          end)
          it("should have less money left",function()
            assert.are_not.equal(data.my_money,99999999)
          end)
        end)
        describe("rolling a 4",function()
          local data=gdata()
          data.my_money=99999999
          data.random=function() return 4 end
          local invasion,reason=invade(data,"holy_roman_empire",3)
          it("should return true",function()
            assert.are.equal(true,invasion)
          end)
          it("should not return a resaon",function()
            assert.are.equal(nil,reason)
          end)
          it("should have less money left",function()
            assert.are_not.equal(data.my_money,99999999)
          end)
        end)
        describe("rolling a 5",function()
          local data=gdata()
          data.my_money=99999999
          data.random=function() return 5 end
          local invasion,reason=invade(data,"holy_roman_empire",3)
          it("should return true",function()
            assert.are.equal(true,invasion)
          end)
          it("should not return a resaon",function()
            assert.are.equal(nil,reason)
          end)
          it("should have less money left",function()
            assert.are_not.equal(data.my_money,99999999)
          end)
        end)
        describe("rolling a 6",function()
          local data=gdata()
          data.my_money=99999999
          data.random=function() return 6 end
          local invasion,reason=invade(data,"holy_roman_empire",3)
          it("should return false",function()
            assert.are.equal(false,invasion)
          end)
          it("should return the reason \"Bad roll\"",function()
            assert.are.equal("Bad roll",reason)
          end)
          it("should have less money left",function()
            assert.are_not.equal(data.my_money,99999999)
          end)
        end)
      end)
    end)
  end)
  describe("with not enough money",function()
    local data=gdata()
    data.my_money=0
    local invasion,reason=invade(data,"holy_roman_empire",3)
    it("should return false",function()
      assert.are.equal(false,invasion)
    end)
    it("should return the reason \"Not enough money!\"",function()
      assert.are.equal("Not enough money!",reason)
    end)
  end)
  describe("with an invalid country",function()
    local data=gdata()
    local invasion,reason=invade(data,"INTENTIONALLY_INVALID",2)
    it("should return false",function()
      assert.are.equal(false,invasion)
    end)
    it("should return the reason \"Invalid country!\"",function()
      assert.are.equal("Invalid country!",reason)
    end)
  end)
  describe("with an country you already own",function()
    local data=gdata()
    table.insert(data.my_cards,"naples")
    local invasion,reason=invade(data,"naples",2)
    it("should return false",function()
      assert.are.equal(false,invasion)
    end)
    it("should return the reason \"Already owned!\"",function()
      assert.are.equal("Already owned!",reason)
    end)
  end)
  describe("with an invalid type",function()
    local data=gdata()
    local invasion,reason=invade(data,"naples",1.5)
    it("should return false",function()
      assert.are.equal(false,invasion)
    end)
    it("should return the reason \"Invalid type!\"",function()
      assert.are.equal("Invalid type!",reason)
    end)
  end)
  describe("with a country",function()
    local base_cost
    describe("that is unowned",function()
      local data=gdata()
      data.my_money=99999
      data.random=function() return 3 end
      local invasion,reason=invade(data,"naples",3)
      it("should return true",function()
        assert.are.equal(true,invasion)
      end)
      it("should not return a resaon",function()
        assert.are.equal(nil,reason)
      end)
      base_cost=99999-data.my_money
    end)
    describe("that is owned by another player (with all other principalities owned)",function()
      local data=gdata()
      for _,v in pairs(data.principalities) do
        if not v.owner then v.owner="a" end
      end
      data.my_money=99999
      data.random=function() return 3 end
      local invasion=invade(data,"naples",3)
      it("should return true",function()
        assert.are.equal(true,invasion)
      end)
      it("should decrease money by twice base_cost",function()
        assert.are.equal(data.my_money,99999-base_cost*2)
      end)
    end)
    describe("that is last card owned by player (with all other principalities owned)",function()
      local data=gdata()
      for _,v in pairs(data.principalities) do
        if not v.owner then v.owner="a" end
      end
      data.principalities.naples.owner="j"
      data.my_money=99999
      data.random=function() return 3 end
      local invasion=invade(data,"naples",3)
      it("should return true",function()
        assert.are.equal(true,invasion)
      end)
      it("should decrease money by thrice base_cost",function()
        assert.are.equal(data.my_money,99999-base_cost*3)
      end)
    end)
  end)
end)
